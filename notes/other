var globalT = t;
var PI = Math.PI;
var TAU = PI * 2;

function SINE(t) {
    return Math.sin(t * Math.PI * TAU);
}

function SAW(t) {
    return ((t*2.0) % 2.0)-1.0;
}

function SQUARE(t) {
    var x = SINE(t);
    if (x > 0) {
        return 1;
    } else {
        return -1;
    }
}

return SQUARE(t);

function Hertz(frequency) {
  return function() {
    return SINE(t * frequency);
  }
}

function bpmTime(bpm, t) {
    return t*(bpm/60);
}

function clip(x) {
    if (x > 1.0) {
        return 1.0;
    }
    if (x < -1.0) {
        return -1.0;
    }

    return x;
}

function envelope(t, a, fn) {
    var x = clip(Math.sin(t * PI) * a);
    return x * fn(t);
}

function Envelope(a, fn) {
    return function(t) {
        var x = clip(Math.sin(t * PI) * a);
        return x * fn(t);
    }
}


function beatOf(t, offset, fn) {
    if ((t > offset) && (t < offset + 1.0)) {
        fn(t % 1.0);
    }
}

function measure(bpm, fns, t) {
    var measureTime = bpmTime(bpm, t) % fns.length;
    var beatTime = measureTime % 1.0;
    for (var i = 0; i < fns.length; i++) {
        if ((measureTime > i) && (measureTime < i+1)) {
            return fns[i](beatTime);
        }
    }
}

function ADSR(a, d, s, r, l, fn) {
    return function(t) {
        var tt = (t-a); // time after attack, now relative to zero
        var volume = 0;
        if (t > l+r) { // bail after end of note
            volume = 0;
        } else if (t < a) { // during attack increase linearly
            volume = (t/a);
        } else if (tt < d)  { // during decay decrease linearly to sustain lavel
            var vv = (1.0 - (tt / d)) * (1.0 - s);
            volume = s + vv;
        } else if (t > l) {
            var ttt = t-l;
            volume = (1.0-(ttt / r)) * s;
        } else {
            volume = s;
        }
        return fn(t) * volume;
    }
}

function iMix(afn, bfn) {
    return function(t) {
        var a = afn(t);
        var b = bfn(t);

        if (a < 0 && b < 0) {
            return (a+b) - ((a*b) /  -1.0);
        } else if (a > 0 && b > 0) {
            return (a+b) - ((a*b) / 1.0);
        } else {
            return a+b;
        }
    }
}

function Mix() {
    var channels = arguments;
    return function(t) {
        var v = 0
        for (var i = 0; i < channels.length; i++) {
            v += channels[i](t);
        }
        return v;
    }
}

function Volume(v, fn) {
    return function(t) {
        return fn(t) * v;
    }
}


/*return measure(120, [
    Envelope(1, Hertz(440.00)),
    Envelope(1, Hertz(349.23)),
    Envelope(1, Hertz(392.00)),
    function() {
        return 0
        ;
    }
], t);
*/

//return ADSR(0.5, 0.5, 0.5, .75, 1, function(t) {return 1.0;})(t);
//return ADSR(0.1, 0.1, 0.5, .1, 1, Hertz(440.00))(t);

function ATest() {
    return Volume(1,
        iMix(
            iMix(
                Hertz(440.0),
                Hertz(880.0)
            ),
            Hertz(220.0)
        )
    );
}

function BTest() {
    return Volume(1,
        iMix(
            iMix(
                Hertz(220.0),
                Hertz(880.0)
            ),
            Hertz(440.0)
        )
    );
}

function CTest() {
    return Volume(.5, Mix(
        Hertz(220.0),
        Hertz(880.0),
        Hertz(440.0)
    ));
}


var atest = ATest();
var btest = BTest();
var ctest = CTest();

function test(t) {
    var ft = t % 4.0;
    if (ft < 1.0) {
        return atest(t);
    } else if (ft < 2.0) {
        return btest(t);
    } else if (ft < 3.0) {
        return ctest(t);
    }
}
